<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[docker运行mysql，docker入门]]></title>
    <url>%2F2019%2F04%2F16%2Fdocker%E8%BF%90%E8%A1%8Cmysql%2F</url>
    <content type="text"><![CDATA[Docker是什么？Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。 Docker的三个概念镜像（Image）：类似于虚拟机中的镜像，是一个包含有文件系统的面向Docker引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。容器（Container）：类似于一个轻量级的沙盒，可以将其看作一个极简的Linux系统环境（包括root权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是是相互隔离的，互不影响。注意：镜像本身是只读的，容器从镜像启动时，Docker在镜像的上层创建一个可写层，镜像本身不变。仓库（Repository）：类似于代码仓库，这里是镜像仓库，是Docker用来集中存放镜像文件的地方。注意与注册服务器（Registry）的区别：注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像，每个镜像利用tag进行区分，比如mysql仓库存放有多个版本（8.0.16、5.7等）的mysql镜像。 Docker安装macOS 我们可以使用 Homebrew 来安装 Docker。 Homebrew 的 Cask 已经支持 Docker for Mac，因此可以很方便的使用 Homebrew Cask 来进行安装：123456789101112$ brew cask install docker==&gt; Creating Caskroom at /usr/local/Caskroom==&gt; We&apos;ll set permissions properly so we won&apos;t need sudo in the futurePassword: # 输入 macOS 密码==&gt; Satisfying dependencies==&gt; Downloading https://download.docker.com/mac/stable/21090/Docker.dmg######################################################################## 100.0%==&gt; Verifying checksum for Cask docker==&gt; Installing Cask docker==&gt; Moving App &apos;Docker.app&apos; to &apos;/Applications/Docker.app&apos;.&amp;#x1f37a; docker was successfully installed! 在载入 Docker app 后，点击 Next，可能会询问你的 macOS 登陆密码，你输入即可。之后会弹出一个 Docker 运行的提示窗口，状态栏上也有有个小鲸鱼的图标（）。 Docker镜像操作我们从官方注册服务器（https://hub.docker.com）的仓库中pull下Mysql的镜像，前边说过，每个仓库会有多个镜像，用tag标示，如果不加tag，默认使用latest镜像： 1234567➜ ~ docker search mysqlNAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relation… 8217 mariadb MariaDB is a community-developed fork of MyS… 2802 mysql/mysql-server Optimized MySQL Server Docker images. Create… 611 percona Percona Server is a fork of the MySQL relati… 435 centurylink/mysql Image containing mysql. Optimized to be link… 60 在hub.docker.com搜索可以查看到mysql镜像的更多信息，https://hub.docker.com/_/mysql?tab=tags 。 先使用docker pull拉取mysql的5.7版本的镜像， 下方mysql:5.7前面mysql为仓库名，5.7为tag版本 1234➜ ~ docker pull mysql:5.75.7: Pulling from library/mysqlDigest: sha256:196fe3e00d68b2417a8cf13482bdab1fcc2b32cf7c7575d0906c700688b352b4Status: Image is up to date for mysql:5.7 拉取完成后使用 docker images 命令查看镜像信息,这里可以看到mysql 5.7的镜像。 ~ docker images123REPOSITORY TAG IMAGE ID CREATED SIZEmysql latest 990386cbd5c0 3 weeks ago 443MBmysql 5.7 7faa3c53e6d6 3 weeks ago 373MB 运行mysql容器基于上面已经拉取到本地的mysql镜像，可以启动一个mysql容器实例 123➜ ~ docker run --name demo-mysql -p 3310:3306 -e MYSQL\_ROOT\_PASSWORD=123456 -d mysql:5.7360e88bd02537bceec18223350161a2bec6c60e63e794aeb6de4516f9cea2499 注意 -p 3310:3306表示的本地机器和容器的端口映射，前面3310为本机端口，3306为运行的容器的端口，表示访问本地机器的3310端口就会映射到容器的3306端口 -e MYSQL_ROOT_PASSWORD=123456 表示设置mysql root用户的密码。 启动完成使用docker ps -a查看运行情况,可以看到启动了mysql:5.7实例，端口映射为：0.0.0.0:3310-&gt;3306/tcp 1234➜ ~ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES360e88bd0253 mysql:5.7 &quot;docker-entrypoint.s…&quot; About a minute ago Up About a minute 33060/tcp, 0.0.0.0:3310-&gt;3306/tcp demo-mysql➜ ~ 到这里可以mysql已经启动完成，可以连接使用,输入密码123456 1➜ ~ mysql -h 127.0.0.1 -P 3310 -u root -p 进入容器这里使用的是 -d后台启动，所有使用 docker attach无进入容器中，这里使用docker exec命令 12345678910111213141516➜ ~ docker exec -it 360e88bd0253 /bin/bashroot@360e88bd0253:/# mysql -u root -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.26 MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; 结束容器使用完毕后，释放docker资源。首先使用docker kill +容器id,然后docker rm +容器id。如下图，最后可以看到已经运行中的容器为空。 12345678910➜ ~ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES360e88bd0253 mysql:5.7 &quot;docker-entrypoint.s…&quot; 17 minutes ago Up 17 minutes 33060/tcp, 0.0.0.0:3310-&gt;3306/tcp demo-mysql➜ ~ docker kill 360e88bd0253360e88bd0253➜ ~ docker rm 360e88bd0253360e88bd0253➜ ~ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES➜ ~]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无问西东]]></title>
    <url>%2F2019%2F04%2F16%2F%E6%97%A0%E9%97%AE%E8%A5%BF%E4%B8%9C%E6%9C%80%E5%90%8E%E5%8F%B0%E8%AF%8D%2F</url>
    <content type="text"><![CDATA[​ 看到和听到的，经常会令你们沮丧，世俗是这样强大，强大到生不出改变它们的念头来。可是如果有机会提前了解了你们的人生，知道青春也不过只有这些日子，不知你们是否还会在意那些世俗希望你们在意的事情，比如占有多少，才更荣耀，拥有什么，才能被爱。等你们长大，你们会因绿芽冒出土地而喜悦，会对初升的朝阳欢呼跳跃，也会给别人善意和温暖。但是却会在赞美别的生命的同时，常常、甚至永远地忘了自己的珍贵。​ 愿你在被打击时，记起你的珍贵，抵抗恶意；​ 愿你在迷茫时，坚信你的珍贵，爱你所爱，行你所行，听从你心，无问西东。 ​]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>经典台词</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二分查找]]></title>
    <url>%2F2019%2F04%2F16%2F%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425# 二分查找，是对有序列表进行操作查找。一般遍历查找的时间复杂度为O(n)，二分查找可以将时间复杂度降低到O(logn)def binary_search(list, target): left, right = 0, len(list) if (right == 0): return -1 while (left &lt; right): middle = int((left + right) / 2) if (list[middle] == target): return middle elif (list[middle] &lt; target): left = middle + 1 else: right = middle - 1 return -1if __name__ == &apos;__main__&apos;: list = [3, 5, 1, 2, 4] l = sorted(list) # 使用内置函数遍历查找，O(n) index1 = l.index(5) # 使用二分查找 O(logn) index2 = binary_search(l, 5) print(index1) print(index2) ​]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
      </tags>
  </entry>
</search>
